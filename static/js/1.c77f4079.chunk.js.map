{"version":3,"sources":["components/Particles/index.tsx","routes/SignIn/SignButton.tsx","routes/SignIn/index.tsx"],"names":["React","react","particles_default","a","className","params","particles","number","value","density","enable","size","random","anim","speed","size_min","line_linked","move","direction","out_mode","interactivity","events","onhover","mode","onclick","modes","bubble","distance","duration","opacity","repulse","SIGN_UP","gql","_templateObject","SIGN_IN_BY_PASSWORD","_templateObject2","SignButton","props","setUser","UserContext","locale","LocaleContext","_React$useMemo","type","mutation","text","signIn","signUp","onMutationCompleted","response","data","signInByPassword","id","username","token","hasSignedIn","react_apollo_browser_umd","onCompleted","mutate","_ref","loading","es_button","onClick","validateFields","err","formValue","variables","__webpack_exports__","es_form","create","name","_props$form","form","getFieldDecorator","components_Particles","Item","rules","validator","rule","callback","test","usernameLimit","input","prefix","icon","style","color","placeholder","passwordLimit","password"],"mappings":"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","file":"static/js/1.c77f4079.chunk.js","sourcesContent":["import * as React from 'react';\nimport Particles from 'react-particles-js';\n\nimport './index.less';\n\nexport default React.memo(function Paricles() {\n  return (\n    <Particles\n      className=\"particles\"\n      params={{\n        particles: {\n          number: {\n            value: 160,\n            density: {\n              enable: false,\n            },\n          },\n          size: {\n            value: 3,\n            random: true,\n            anim: {\n              speed: 4,\n              size_min: 0.3,\n            },\n          },\n          line_linked: {\n            enable: false,\n          },\n          move: {\n            random: true,\n            speed: 1,\n            direction: 'top',\n            out_mode: 'out',\n          },\n        },\n        interactivity: {\n          events: {\n            onhover: {\n              enable: true,\n              mode: 'bubble',\n            },\n            onclick: {\n              enable: true,\n              mode: 'repulse',\n            },\n          },\n          modes: {\n            bubble: {\n              distance: 250,\n              duration: 2,\n              size: 0,\n              opacity: 0,\n            },\n            repulse: {\n              distance: 400,\n              duration: 4,\n            },\n          },\n        },\n      }}\n    />\n  );\n});\n","import * as React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Button } from 'antd';\n\nimport { UserContext } from '$contexts/User';\nimport { LocaleContext } from '$contexts/Locale';\n\nimport { FormValue } from './index';\n\ninterface SignButtonProps {\n  type: 'sign-up' | 'sign-in';\n  validateFields(options: Object): void;\n}\n\nconst SIGN_UP = gql`\n  mutation signUp($username: String!, $password: String!) {\n    signUp(username: $username, password: $password) {\n      id\n      username\n      token\n    }\n  }\n`;\n\nconst SIGN_IN_BY_PASSWORD = gql`\n  mutation signInByPassword($username: String!, $password: String!) {\n    signInByPassword(username: $username, password: $password) {\n      id\n      username\n      token\n    }\n  }\n`;\n\nexport default function SignButton(props: SignButtonProps) {\n  const { setUser } = React.useContext(UserContext);\n  const { locale } = React.useContext(LocaleContext);\n  const { mutation, type, text } = React.useMemo(() => {\n    if (props.type === 'sign-up') {\n      return {\n        mutation: SIGN_UP,\n        type: 'default',\n        text: locale.signIn.signUp,\n      };\n    } else {\n      return {\n        mutation: SIGN_IN_BY_PASSWORD,\n        type: 'primary',\n        text: locale.signIn.signIn,\n      };\n    }\n  }, [props.type]);\n\n  const onMutationCompleted = React.useCallback(response => {\n    const data = response.signUp || response.signInByPassword;\n    const { id, username, token } = data;\n    setUser({ id, username, token, hasSignedIn: true });\n  }, []);\n\n  return (\n    <Mutation mutation={mutation} onCompleted={onMutationCompleted}>\n      {(mutate, { loading }) => {\n        const onButtonClick = () =>\n          props.validateFields((err: Error, formValue: FormValue) => {\n            if (!err) {\n              mutate({ variables: formValue });\n            }\n          });\n\n        return (\n          <Button type={type as any} loading={loading} onClick={onButtonClick}>\n            {text}\n          </Button>\n        );\n      }}\n    </Mutation>\n  );\n}\n","import * as React from 'react';\nimport { Form, Icon, Input } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\n\nimport { LocaleContext } from '$contexts/Locale';\n\nimport Particles from '$components/Particles';\n\nimport SignButton from './SignButton';\n\nimport './index.less';\n\nexport interface FormValue {\n  username: string;\n  password: string;\n}\n\ninterface SignInProps extends FormComponentProps {\n  path: string;\n}\n\nfunction SignIn(props: SignInProps) {\n  const { getFieldDecorator, validateFields } = props.form;\n  const { locale } = React.useContext(LocaleContext);\n\n  return (\n    <div className=\"sign-in page-container\">\n      <Particles />\n      <Form>\n        <Form.Item>\n          {getFieldDecorator('username', {\n            rules: [\n              {\n                validator(rule, value, callback) {\n                  if (/^[\\da-zA-Z]{3,15}$/g.test(value)) {\n                    callback();\n                  }\n                  callback(locale.signIn.usernameLimit);\n                },\n              },\n            ],\n          })(\n            <Input\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder={locale.signIn.username}\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('password', {\n            rules: [\n              {\n                validator(rule, value, callback) {\n                  if (\n                    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[\\da-zA-Z]{6,15}$/.test(\n                      value,\n                    )\n                  ) {\n                    callback();\n                  }\n                  callback(locale.signIn.passwordLimit);\n                },\n              },\n            ],\n          })(\n            <Input\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              type=\"password\"\n              placeholder={locale.signIn.password}\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          <SignButton type=\"sign-up\" validateFields={validateFields} />\n          <SignButton type=\"sign-in\" validateFields={validateFields} />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default Form.create({ name: 'signIn' } as any)(React.memo(SignIn));\n"],"sourceRoot":""}